import pandas as pd
import numpy as np


from bokeh.io import curdoc
from bokeh.layouts import column,row
from bokeh.models import ColumnDataSource, CustomJS, RangeSlider,Slider,LogColorMapper
from bokeh.plotting import figure, show,output_file
from bokeh.palettes import Inferno256

import sys 
sys.path.insert(1,"sample")
from smoother import w_e_smoother,mean_smooth
from coord_precessing import speed,turn
from output_read import read_excel


def load_cvs(source):
    return pd.read_csv(source)

 
def plot(rat,exp,num,output_filename,title,bin=100,d=1,l=20,padding=5,log_bar_min=5):

    

    output_file(filename=output_filename+".html", title=title)

    curdoc().theme = "dark_minimal"


    print(rat,exp,num)
    dataframe=read_excel.get_csv_of(rat,exp,num=num)
    x_clean,y_clean,t_clean=read_excel.clean(dataframe)
    x=np.array(dataframe['x'].values)
    y=np.array(dataframe['y'].values)
    t=np.array(dataframe['num'].values)

    #print(len(x))
    #print(len(y))
    #angle,angle2,X,Y=turn.get_angle(x,y)
    
    #source1 = ColumnDataSource(data=dict(x=x, y=y))




    source1 = ColumnDataSource(data=dict(x=w_e_smoother.whittaker_smooth(x_clean,l,d=d), y=w_e_smoother.whittaker_smooth(y_clean,l,d=d)))
    source2 = ColumnDataSource(data=dict(x=w_e_smoother.whittaker_smooth(x_clean,l,d=d), y=w_e_smoother.whittaker_smooth(y_clean,l,d=d)))

    #source2 = ColumnDataSource(data=dict(x=x, y=y))
    plot2 = figure(width=500, height=500, x_range=(0, 1000), y_range=(0, 1000),active_drag=None)
    plot2.title="Rat Trajectory - RAW"
    plot2.circle('x', 'y', source=source2, line_width=2, line_alpha=0.2,fill_alpha = 0.3)


    callback1 = CustomJS(args=dict(source1=source1,source2=source2), code="""
        const f = cb_obj.value[0]
        const g = cb_obj.value[1]
        const x = source1.data.x.slice(f,g)
        const y = source1.data.y.slice(f,g)
        source2.data = { x, y }

    """)

    slider = RangeSlider(start=0, end=len(x_clean)-1, value=(0,len(x_clean)-1), step=1, title="sub trajectory",width=400)
    slider.js_on_change('value', callback1)


    #source3 = ColumnDataSource(data=dict(x=X, y=Y))
    #source3b = ColumnDataSource(data=dict(x=X, y=Y))

    #source3 = ColumnDataSource(data=dict(x=mean_smooth.mean_smooth(x,window=15), y=mean_smooth.mean_smooth(y,window=15)))
    #source3b = ColumnDataSource(data=dict(x=mean_smooth.mean_smooth(x,window=15), y=mean_smooth.mean_smooth(y,window=15)))
    #source3 = ColumnDataSource(data=dict(x=w_e_smoother.whittaker_smooth(x,l,d=d), y=w_e_smoother.whittaker_smooth(y,l,d=d)))
    #source3b = ColumnDataSource(data=dict(x=w_e_smoother.whittaker_smooth(x,l,d=d), y=w_e_smoother.whittaker_smooth(y,l,d=d)))
    source3 = ColumnDataSource(data=dict(x=x_clean, y=y_clean))
    source3b = ColumnDataSource(data=dict(x=x_clean, y=y_clean))
    plot3 = figure(width=500, height=500, x_range=(0, 1000), y_range=(0, 1000),active_drag=None)
    plot3.title="Rat Trajectory - SMOOTH "
    plot3.circle('x', 'y', source=source3b, line_width=2, line_alpha=0.2,fill_alpha = 0.3)


    callback2 = CustomJS(args=dict(source1=source3,source2=source3b), code="""
        const f = cb_obj.value[0]
        const g = cb_obj.value[1]
        const x = source1.data.x.slice(f,g)
        const y = source1.data.y.slice(f,g)
        source2.data = { x, y }

    """)

    slider2 = RangeSlider(start=0, end=len(x_clean)-1, value=(0,len(x_clean)-1), step=1, title="sub trajectory",width=400)
    slider2.js_on_change('value', callback2)

    def bins(bin,x,y):
        shape = [int(bin),int(bin)]
        bins = np.zeros(shape, dtype=int)

        xind = x //  int((1000/bin))

        yind = y // int((1000/bin))

        for ind in zip(yind, xind):
            #print(ind)

            bins[int(ind[0]),int(ind[1])] += 1
        return bins


    
    
    img=bins(bin,x,y)
    

    source4=ColumnDataSource({'image': [img]})

    plot4 = figure(width=500, height=500,tooltips=[("x", "$x"), ("y", "$y"), ("value", "@image")],active_drag=None)
    #plot4.x_range.range_padding = plot4.y_range.range_padding = 0
    plot4.title="Heat Map - Linear Scale"
    #plot4.grid.grid_line_width = 0.5


    r= plot4.image(image='image', x=0, y=0, dw=1000, dh=1000,palette=Inferno256, level="image",source=source4) #♣,color_mapper=color_mapper

    color_bar = r.construct_color_bar(padding=1)

    plot4.add_layout(color_bar, "right")

    plot4b = figure(width=500, height=500,tooltips=[("x", "$x"), ("y", "$y"), ("value", "@image")],active_drag=None)
    #plot4.x_range.range_padding = plot4.y_range.range_padding = 0
    plot4b.title="Heat Map - Log Scale"
    #plot4.grid.grid_line_width = 0.5


    color_mapper = LogColorMapper(palette=Inferno256,low=log_bar_min,high=np.max(img))

    rb= plot4b.image(image='image', x=0, y=0, dw=1000, dh=1000, level="image",source=source4,color_mapper=color_mapper) #♣

    color_bar = rb.construct_color_bar(padding=1)

    plot4b.add_layout(color_bar, "right")


    #print("ok")
    s=speed.speed(x,y,t,padding,smooth=1,l=l)[0]
    
    
    source6=ColumnDataSource(data=dict(x=np.linspace(0,len(s),len(s)),y=s))

    source6b=ColumnDataSource(data=dict(x=np.linspace(0,len(s),len(s)),y=s))

    callback4 = CustomJS(args=dict(source1=source6,source2=source6b), code="""
        const f = cb_obj.value[0]
        const g = cb_obj.value[1]
        const x = source1.data.x.slice(f,g)
        const y = source1.data.y.slice(f,g)
        source2.data = { x, y }

    """)

    slider4 = RangeSlider(start=0, end=len(s)-1, value=(0,len(s)-1), step=1, title="sub trajectory",width=900)
    slider4.js_on_change('value', callback4)
    plot6=figure(width=1000, height=500)
    plot6.title="Vitesse en mm/s en fonction des frames, smooth on x,y"
    plot6.line(source=source6b)

    # #print("ok")
    # s=speed.speed(x,y,t,padding,smooth=2,l=l)[0]
    # source7=ColumnDataSource(data=dict(x=np.linspace(0,len(s),len(s)),y=s))

    # source7b=ColumnDataSource(data=dict(x=np.linspace(0,len(s),len(s)),y=s))

    # callback5 = CustomJS(args=dict(source1=source7,source2=source7b), code="""
    #     const f = cb_obj.value[0]
    #     const g = cb_obj.value[1]
    #     const x = source1.data.x.slice(f,g)
    #     const y = source1.data.y.slice(f,g)
    #     source2.data = { x, y }

    # """)

    # slider5 = RangeSlider(start=0, end=len(s)-1, value=(0,len(s)-1), step=1, title="sub trajectory",width=900)
    # slider5.js_on_change('value', callback5)
    # plot7=figure(width=1000, height=500)
    # plot7.title="Vitesse en mm/s en fonction des frames, smooth on speed"
    # plot7.line(source=source7b)

    layout = column(row(column( slider,plot2),column(slider2,plot3)),column(plot6,slider4),row(plot4,plot4b))
    #layout=column(global_slider,row(plot2,plot3),plot5,row(plot4,plot4b))
    show(layout)


